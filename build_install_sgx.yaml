---

# Install SDK, verify hardware and if it supports SGX, install Driver and platform software (PSW)
############################################################################
# See also the README.md from this repository for the following information:
# - what is Ansible and how it works
# - how to run the modules and configure the inventory
# - what are the steps done for each component
############################################################################

##############################################################################################################
# [USAGE]: ansible-playbook -i hosts_file build_install_sgx.yaml [--tags hw_verif/sgx_driver/sgx_psw/sgx_sdk]
# For more info, see here: https://github.com/hstoenescu/Intel-sgx-ansible-playbook#playbook-files
##############################################################################################################

# -- Ubuntu 22.04 install -- #

- hosts: sgx_server
  become: no
  vars:
    ### SDK + PSW ###
    sgx_repo: https://github.com/intel/linux-sgx
    sdk_location: /linux/installer/bin
    psw_location: /linux/installer/deb
    sample_repo: https://github.com/hstoenescu/SGX-beginner-sample

    ### HW verification ###
    hw_repo: https://github.com/ayeks/SGX-hardware
    hw_exec: test-sgx

    # note that all packages are updated or installed if not found

  tasks:
    # - name: "[GENERAL] Get the current user from the current machine"
    #   shell: "whoami"
    #   register: current_user
    #   tags: ['sgx_sdk', 'sgx_psw', "hw_verif" ]

    - name: "[GENERAL] Get the home directory from the current machine"
      shell: "pwd"
      register: current_home_directory
      tags: ['sgx_sdk', 'sgx_psw', "hw_verif" ]

    - name: "[GENERAL] Complete the path on variables with the current user"
      set_fact:
        ansible_repo="{{ current_home_directory.stdout }}/Documents/SGX/linux-sgx"
        hw_location="{{ current_home_directory.stdout }}/Documents/SGX/sgx-hardware"
      tags: ['sgx_sdk', 'sgx_psw', "hw_verif" ]

    ## General prerequisites ##
    - name: "[GENERAL SETUP] Install the required tools for compiling code - gcc"
      apt:
        name: gcc
        state: latest
        update_cache: yes
      become: yes
      tags: ['sgx_sdk', 'sgx_psw', "hw_verif" ]

    ##### SDK #####

    - name: "[SDK] Install required tools to build the Intel SGX SDK for Ubuntu 22.04"
      apt:
        name: ['build-essential', 'ocaml', 'ocamlbuild', 'automake', 'autoconf', 'libtool', 'wget', 'python-is-python3', 'libssl-dev', 'git', 'cmake', 'perl']
        state: latest
        update_cache: yes
      become: yes
      tags: sgx_sdk

    - name: Check if the linux-sgx repository directory exists
      stat:
        path: "{{ ansible_repo }}"
      register: repo_dir
      tags: ['sgx_sdk', 'sgx_psw']

    - name: Print a debug message if linux-sgx repository exists
      debug:
        msg: "Repository already exists at {{ ansible_repo }}"
      when: repo_dir.stat.exists
      tags: ['sgx_sdk', 'sgx_psw']

    - name: "[SDK + PSW] Clone the linux-sgx repository to the current machine"
      git: repo={{ sgx_repo }}
           dest={{ ansible_repo }}
      tags: ['sgx_sdk', 'sgx_psw']
      when: not repo_dir.stat.exists

    - name: "[SDK + PSW] Prepare the submodules and execute download_prebuilt to download prebuilt binaries to folder"
      make:
        chdir: "{{ ansible_repo }}"
        target: preparation
      tags: ['sgx_sdk', 'sgx_psw']

    ##### SDK #####
    ## Build only sdk with default configuration         ## 
    ## Note: the folder size can be up to 500MB          ##
    - name: "[SDK] Build the Intel SGX SDK. This may take a while ..."
      make:
        chdir: "{{ ansible_repo }}"
        target: sdk
      tags: sgx_sdk

    ## Note: after this operation can be up to 588MB ##
    - name: "[SDK] Build the Intel SGX SDK installer"
      make:
        chdir: "{{ ansible_repo }}"
        target: sdk_install_pkg
      tags: sgx_sdk

    ## Used for reference the script build.sh from .../linux/installer/deb/libsgx-urts ##
    - name: "[SDK + PSW] Get the SGX version"
      shell: awk '/STRFILEVER/ {print $3}' common/inc/internal/se_version.h | sed 's/^\"\(.*\)\"$/\1/'
      args:
        chdir: "{{ ansible_repo }}"
      register: sgx_version
      tags: ['sgx_sdk', 'sgx_psw']

    - name: "[SDK + PSW] Get the short codename for current OS"
      shell: lsb_release -cs
      register: os_codename
      tags: ['sgx_sdk', 'sgx_psw']

    - name: "[SDK + PSW] Get the DEB version"
      shell: 'echo $(dpkg-parsechangelog | grep "Version" | cut -d: -f2) |  cut -d- -f2'
      args:
        chdir: "{{ ansible_repo }}{{ psw_location }}/libsgx-urts/libsgx-urts-1.0"
      register: deb_version
      tags: ['sgx_sdk', 'sgx_psw']

    ## Install the Intel SGX SDK ##
    - name: Install the required tools to use Intel SGX SDK
      apt:
        name: ['build-essential', 'python-is-python3']
        state: latest
        update_cache: yes
      tags: sgx_sdk
      become: yes

    - name: Install the Intel SGX SDK
      shell: "yes 'yes' | ./sgx_linux_x64_sdk_{{ sgx_version.stdout }}.bin"
      args:
        chdir: "{{ ansible_repo }}{{ sdk_location }}"
      tags: sgx_sdk
      become: yes

    ## Note that we still need to source the environment when testing an application on this file ##
    - name: Add the source command to sgxsdk environment to .bashrc for the current user
      lineinfile:
        path: "{{ current_home_directory.stdout }}/.bashrc"
        line: source {{ ansible_repo }}{{ sdk_location }}/sgxsdk/environment
      tags: sgx_sdk

    - name: Source the new .bashrc file for current user
      shell: . {{ current_home_directory.stdout }}/.bashrc
      tags: sgx_sdk

    ############################################################################################################################################
    ## Hardware verification - before installing the DRIVER + PSW, there is need to verify if the hardware supports SGX in real mode ##
    ## Simulation works without using the true hardware, instead the instructions are simulated in software ##

    - name: "[HW verification] Install the prerequisites libraries"
      apt: 
        name: ['libcap-dev']
        state: latest
        update_cache: yes
      become: yes
      tags: hw_verif

    - name: "[HW verification] Download the sgx hardware verification repository. 
             See the README from this link: {{ hw_repo }} for more information"
      git: repo={{ hw_repo }}
           dest={{ hw_location }}
      tags: hw_verif
    
    - name: "[HW verification] Compile the sgx hardware to get the tester executable"
      shell: "gcc -Wl,--no-as-needed -Wall -Wextra -Wpedantic -masm=intel -o test-sgx -lcap cpuid.c rdmsr.c xsave.c vdso.c test-sgx.c"
      args:
        chdir: "{{ hw_location }}"
      tags: hw_verif

    - name: "[HW verification] Run the tester for hardware"
      shell: "./test-sgx"
      args:
        chdir: "{{ hw_location }}"
      register: out_test_sgx
      tags: hw_verif

    ## There is no need anymore for sgx-hardware repo, so delete it before verification ##
    - name: "[HW verification] Delete the sgx hardware repo folder: {{ hw_location }}"
      file:
        state: absent
        path: "{{ hw_location }}"
      tags: hw_verif

    ## Verify the entire string, not by splitting and getting the index value ##
    - name: "[HW verification] Verify the CPU support - 
             fail the play if 'Supports SGX' is not found in the output"
      fail:
        msg: "[HW verification] SGX functions are deactivated or SGX is not supported in the current CPU.
              See here the list of processors: https://ark.intel.com/content/www/us/en/ark.html#@Processors and verify the current one"
      when: "'Supports SGX' not in out_test_sgx.stdout"
      tags: hw_verif

    - name: "[HW verification] Verify the SGX support in BIOS"
      fail:
        msg: "[HW verification] SGX is available for CPU, but not enabled in BIOS. Consult the documentation for how to enable it in BIOS.
              Also, on some devices it may not be supported at all by the BIOS"
      when:
        - "'SGX1 leaf instructions (SGX1): 1' not in out_test_sgx.stdout"
        - "'SGX2 leaf instructions (SGX2): 1' not in out_test_sgx.stdout"
      tags: hw_verif

    - name: "[HW verification] Report SGX1 and SGX2 status"
      debug:
        msg: >
          SGX1 status: {{ 'enabled' if 'SGX1 leaf instructions (SGX1): 1' in out_test_sgx.stdout else 'not enabled' }}.
          SGX2 status: {{ 'enabled' if 'SGX2 leaf instructions (SGX2): 1' in out_test_sgx.stdout else 'not enabled' }}.
      tags: hw_verif
    
    ##### PSW #####
    - name: "[PSW] Install additional required tools to build the Intel SGX PSW"
      apt:
        name: ['libssl-dev', 'libcurl4-openssl-dev', 'protobuf-compiler', 'libprotobuf-dev', 'debhelper', 'cmake', 'reprepro', 'unzip', 'pkgconf', 'libboost-dev', 'libboost-system-dev', 'libboost-thread-dev', 'lsb-release', 'libsystemd0']
        state: latest
        update_cache: yes
      become: yes
      tags: sgx_psw
    
    ## Build psw with default configuration ## 
    ## Note: the folder size can be up to 500MB          ##
    - name: "[PSW] Build the Intel SGX PSW. This may take a while ..."
      shell: ". {{ ansible_repo }}{{ sdk_location }}/sgxsdk/environment && make psw"
      args:
        chdir: "{{ ansible_repo }}"
      tags: sgx_psw
    
    ##### PSW (platform software) #####
    - name: "[PSW] Build the SGX PSW installer"
      shell: ". {{ ansible_repo }}{{ sdk_location }}/sgxsdk/environment && make deb_psw_pkg"
      args:
        chdir: "{{ ansible_repo }}"
      tags: sgx_psw

    - name: "[PSW] Install the prerequisites libraries"
      apt: 
        name: ['libssl-dev', 'libcurl4-openssl-dev', 'libprotobuf-dev']
        state: latest
        update_cache: yes
      become: yes
      tags: sgx_psw

    - name: "[PSW] Build local Debian package repository"
      shell: ". {{ ansible_repo }}{{ sdk_location }}/sgxsdk/environment && make deb_local_repo"
      args:
        chdir: "{{ ansible_repo }}"
      tags: sgx_psw 

    - name: Append custom repository to /etc/apt/sources.list
      become: yes
      lineinfile:
        path: /etc/apt/sources.list
        line: "deb [trusted=yes arch=amd64] file:{{ ansible_repo }}{{ psw_location }}/sgx_debian_local_repo jammy main"
        insertafter: EOF 
      tags: sgx_psw 

    - name: "[PSW] Install the SGX PSW"
      apt: 
        name: ['libsgx-launch', 'libsgx-urts', 'libsgx-epid', 'libsgx-quote-ex', 'libsgx-dcap-ql']
        state: latest
        update_cache: yes
      become: yes
      tags: sgx_psw
    
    - name: "[PSW] Make sure the aesmd service is up and running"
      service: 
        name=aesmd
        state=started
        enabled=yes 
      become: yes
      tags: sgx_psw
